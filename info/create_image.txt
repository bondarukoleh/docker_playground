Creating an image with dockerfile. Dockerfile - looks like a shell script, but it's not. It's a different language.

To create image from dockerfile we need
$>docker build -t tag_for_docker (if needed) -f docker_file_name
$>docker build -t bondarukoleh/node10_with_ubuntu:latest ./docker (folder where dockerfile is)

If you built an image and then changed something in dockerfile - and re-built it, you can see that layers 
that was already created for previous one - used in new one, like "Using cache", that's the docker re-using
layers for new images, only changed stuff is creating new layer.
And important note is: if one line in dockerfile is changed - after that - docker need to create a hole 
new layers sandwich, so it's important to save time and space to keep things that change often - in the 
bottom of your docker file.

Docker file commands:
FROM (required) - base distribution what you want to use for your functionality. It's debian:jessie or alpine or ubuntu. 
Many OS is provided with minimum functionality, without curls or any other stuff. So if you need some addition
packages (probably it is so), you can use apt, or yum managers, so you need distribution where they are.  
It's like: Debian, Ubuntu, Fedora, CentOS. If you want have image without anything - use FROM scratch.
FROM debian:jessie

ENV - for environment variables. Putting keys and values. Order matters, it work up down.
ENV MY_EVN_VAR value
ENV MY_EVN_VAR2 'some other value'

RUN - here we can run any stuff. Also note about "&&" if you connect two commands with double-ampersand - that means
that docker will write these commands execution results in one layer, witch can save us much space.
So install node -> in one layer, and pull repository and install packages - in another.
RUN sudo apt-get install curl \
 && curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash \
 && nvm install node \
 && nvm use node -> this will be in one layer in image
RUN npm clone http://github.com/some_repo.git && npm i -> this will be another layer, stored differently.

Docker has his own log file, so we don't need to worry about it, all we want to do is to show log in stdout
  or stderr.

EXPOSE - by default NO PORT ARE OPENED in virtual network where container is running, to talk to it somehow inside
VN where container is running - we should set them here. If we need to talk to it from other VN or from outside 
network - we still need to expose ports when we run "docker run -p" command. So for some http server - it's 
common to expose 80 and 443 port
EXPOSE 80 443

CMD [command1, command2] (required) - these commands will run when new container is run, or when start stopped
container. Only one command is allowed, so if there will be multiple - last one wins.
CMD ["ping", "8.8.8.8"] or ["npm", "run", "server stop"] (not sure about the last)

WORKDIR - change working directory to needed
WORKDIR /usr/share/nginx/html
change working directory to root of nginx webhost
using WORKDIR is preferred to using 'RUN cd /some/path'

COPY - copy file from local machine to my image. Ability to copy some source code to your image.
COPY file_from_local.js file_in_image.js
