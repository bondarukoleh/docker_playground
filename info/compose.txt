Docker compose it's a super powerful thing that gives us ability to combine dockers, 
connect them in one thing.
Main features:
 - configure relationships between containers
 - collect all setting for container in one file.
 - create one-way environment start-up file used everywhere.
There are two parts of docker compose:
YAML-formatted file that describes our solution:
 - Containers, networks, volumes, images, environment variables etc.
 - CLI tool docker-compose used for local dev/test automation with those YAML file.

 Docker-compose file
 Compose YAML has it's own versioning. 1, 2, 2.1, 3, 3.1 - 3.7. Which is firs line in a file.
 We can use it with docker-compose cli for local development, and it can be used with docker
 directly in production with Swarm.
 docker-compose.yml it's a default name, but we can specify any .yml file with docker-compose -f 

in docker-compose.yml
 version: '3.7' -> if we don't specify version - we'll get 1st, which is not good.
 services: -> here we specify containers we want to use, hierarchically.
  servicename1: -> name service, should be uniq, this also will be DNS name inside network
    image: -> (optional) if you use build - set the image you want to build container formatted
    command: -> (optional) overrides CMD from docker file.
    environment: -> (optional) ENV in dockerfile, or -e in docker run
    volumes: -> (optional) VOLUME in dockerfile, -v in docker run.
    depends_on: -> (optional) telling compose what should be started before this service.
  servicename2: -> ...
 volumes: -> (optional) docker volume create
 networks: ->  (optional) same as docker network create.

So here in docker-compose, we can store all work, all docker run commands that we should type
manually, or create a sell scripts for them, we can pull all command for setup our environment 
and keep it here.

Simple example. To create our SSG we should type a big command in terminal:
$>docker container run -p 4000:4000 -v $(pwd):/site --name jekyll bretfisher/jekyll-serve
but we can easily store all this in docker-compose

version: '3'
services: 
  jekyll:
    image: bretfisher/jekyll-serve #only one option - key-value pair
    volumes: #list of options "-" dash sign before each.
      - '.:/site' #as you can see no need to $(pwd), compose understands relative path
    ports:
      - '4000:4000'

  # but pay attention that environment is special. Work is not in plural form but we can 
  # pass a multiple parameters to it, with key-value syntax, without "-" dash.
    environment:
      VAR1: 'value1'
      VAR2: 'value2'
  # or with next syntax
      - VAR3=value3
      - VAR4=value4

And we don't need to type this twice anymore.

Docker-compose CLI
It's not designed for production, it's for local development.
Main commands is:
  $>docker-compose up -> just one shot command to start everything.
  $>docker-compose down -> remove containers, networks, volumes and cont/vol/net

It's super-cool to store all environment new guy developer needs to setup in one docker-compose.yml
file. And one thing he has  to do is just install docker, and download docker-compose.yml file, 
bam and he is ready to work, all needed environment is setup.

