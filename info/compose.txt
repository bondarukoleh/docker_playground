Docker compose it's a super powerful thing that gives us ability to combine dockers, 
connect them in one thing.
Main features:
 - configure relationships between containers
 - collect all setting for container in one file.
 - create one-way environment start-up file used everywhere.
There are two parts of docker compose:
YAML-formatted file that describes our solution:
 - Containers, networks, volumes, images, environment variables etc.
 - CLI tool docker-compose used for local dev/test automation with those YAML file.

 Docker-compose file
 Compose YAML has it's own versioning. 1, 2, 2.1, 3, 3.1 - 3.7. Which is firs line in a file.
 We can use it with docker-compose cli for local development, and it can be used with docker
 directly in production with Swarm.
 docker-compose.yml it's a default name, but we can specify any .yml file with docker-compose -f 

in docker-compose.yml
 version: '3.7' -> if we don't specify version - we'll get 1st, which is not good.
 services: -> here we specify containers we want to use, hierarchically.
  servicename1: -> name service, should be uniq, this also will be DNS name inside network
    image: -> (optional) if you use build - set the image name you want to build. If we don't
      specify this name, and have build command here - image will be created with folder name
      where the dockerfile is. Image will have name folder_where_dockerfile_is_service_name
      
    build: -> section for building images
      context: . -> where we want to build image
      dockerfile: -> what dockerfile we want to use to build image.
    command: -> (optional) overrides CMD from docker file.
    environment: -> (optional) ENV in dockerfile, or -e in docker run
    volumes: -> (optional) VOLUME in dockerfile, -v in docker run.
    depends_on: -> (optional) telling compose what should be started before this service.
  servicename2: -> ...
 volumes: -> (optional) docker volume create
 networks: ->  (optional) same as docker network create.

So here in docker-compose, we can store all work, all docker run commands that we should type
manually, or create a shell scripts for them, we can pull all command for setup our environment 
and keep it here.

Simple example. To create our SSG we should type a big command in terminal:
$>docker container run -p 4000:4000 -v $(pwd):/site --name jekyll bretfisher/jekyll-serve
but we can easily store all this in docker-compose

version: '3'
services: 
  jekyll:
    image: bretfisher/jekyll-serve #only one option - key-value pair
    volumes: #list of options "-" dash sign before each.
      - '.:/site' #as you can see no need to $(pwd), compose understands relative path
    ports:
      - '4000:4000'

  # but pay attention that environment is special. Work is not in plural form but we can 
  # pass a multiple parameters to it, with key-value syntax, without "-" dash.
    environment:
      VAR1: 'value1'
      VAR2: 'value2'
  # or with next syntax
      - VAR3=value3
      - VAR4=value4

And we don't need to type this twice anymore.

Docker-compose CLI
It's not magic, docker-compose - still talking to docker-server API when it's working.
It's not designed for production, it's for local development.
Main commands is:
  $>docker-compose up -> just one shot command to start everything.
  $>docker-compose down -> remove containers, networks, volumes and cont/vol/net
  $>docker-compose down -v - to remove volumes also
  $>docker-compose down --rmi local -> deletes created by compose images. But pay attention
    it won't delete images with "custom" name part.

It's super-cool to store all environment new guy developer needs to setup in one docker-compose.yml
file. And one thing he has  to do is just install docker, and download docker-compose.yml file, 
bam and he is ready to work, all needed environment is setup.

To see logs:
$>docker-compose logs
watch what's going on, containers, etc.
$>docker-compose ps
what's running inside a container
$>docker-compose top

We can build images with docker-compose.
 If we use docker-compose up, and in docker-compose.yml - will be build section, then we will
 build image only after we don't find it in cash. So it will be built only once.
 To re-build image each time when we up a docker-compose - we need to add --build flag to
 up command or docker-compose build.

TASKS

1. Make a Drupal content management system. Drupal - it's a site generator.
  Compose file in ../docker-compose/drupal_CMS/docker-compose.yml

2. Use compose to build and run images.
  For example I want to check how my site is working in production like environment, 
  that's why I'll set nginx as a proxy server, and upp an apache server with bootstrap
  template site. And since I've make a volume from host source code to container - I can
  change the code and see how it behaves, because apache is looking to my host directory.
  it's done in -> ../docker-compose/nginx_apache_bootstrap

3. Make a custom drupal image, with installed bootstrap theme.
  Done in ../docker-compose/custom_drupal_bootstrap

